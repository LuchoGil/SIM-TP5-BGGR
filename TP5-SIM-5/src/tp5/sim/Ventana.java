
package tp5.sim;

import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import static javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

public class Ventana extends javax.swing.JFrame {

    private DefaultTableModel modelo1;
    private DefaultTableModel modelo2;
    private static JTable table;
    private static DefaultTableModel dm;
    private static Object[] vector;
    /**
     * Creates new form Ventana
     */
    Ventana() {
    super();
    initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        modelo1 = new DefaultTableModel() {
            public boolean isCellEditable(int fila, int columna) {
                return false;
            }
        };
        cargarTablaTiempo();
        tablaTiempo.setModel(modelo1);
        modelo2 = new DefaultTableModel() {
            public boolean isCellEditable(int fila, int columna) {
                return false;
            }
        };
        cargarTablaCondicion();
        tablaCondicion.setModel(modelo2);

        dm = new DefaultTableModel();
        table = new JTable(dm) {
        protected JTableHeader createDefaultTableHeader() {
            return new GroupableTableHeader(columnModel);
      }
    };
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//        table.scrollRectToVisible(null);
  }

    public void cargarTablaTiempo() {
        Object[] tiempo = new Object[2];
        tiempo[0] = 1;
        tiempo[1] = 2;
        modelo1.addColumn("Tiempo (hs)", tiempo);

        Object intervalo[] = new Object[2];
        intervalo[0] = "0.00 - 0.39";
        intervalo[1] = "0.40 - 0.99";
        modelo1.addColumn("Intervalo", intervalo);
    }
    
    public void cargarTablaCondicion() {
        Object[] condicion = new Object[4];
        condicion[0] = "No monedas";
        condicion[1] = "Utiliza 50%-95%";
        condicion[2] = "Utiliza 100%";
        condicion[3] = "Demora 5%-15%";
        modelo2.addColumn("Condición", condicion);

        Object intervalo[] = new Object[4];
        intervalo[0] = "0.00 - 0.02";
        intervalo[1] = "0.03 - 0.39";
        intervalo[2] = "0.40 - 0.79";
        intervalo[3] = "0.80 - 0.99";
        modelo2.addColumn("Intervalo", intervalo);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_reloj = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_cantParquimetros = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_horaInicio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_cantIteraciones = new javax.swing.JTextField();
        btn_simular = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaTiempo = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCondicion = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 200));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new java.awt.GridLayout(6, 0));

        jLabel1.setText("Hora Fin Simulación");
        jPanel2.add(jLabel1);
        jPanel2.add(txt_reloj);

        jLabel3.setText("Cantidad parquímetros");
        jPanel2.add(jLabel3);
        jPanel2.add(txt_cantParquimetros);

        jLabel2.setText("Hora inicio a mostrar");
        jPanel2.add(jLabel2);
        jPanel2.add(txt_horaInicio);

        jLabel4.setText("Cantidad iteraciones a mostrar");
        jPanel2.add(jLabel4);
        jPanel2.add(txt_cantIteraciones);

        btn_simular.setText("Simular");
        btn_simular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simularActionPerformed(evt);
            }
        });
        jPanel2.add(btn_simular);

        jPanel1.add(jPanel2);

        tablaTiempo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablaTiempo);

        jPanel1.add(jScrollPane3);

        tablaCondicion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaCondicion);

        jPanel1.add(jScrollPane2);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_simularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simularActionPerformed
//    DefaultTableModel dm = new DefaultTableModel();
    int cantParquimetros=Integer.parseInt(txt_cantParquimetros.getText());
    int cantColumnas=15 + cantParquimetros*3;
    int j=1;    
    int i;
    vector= new Object[cantColumnas];
    vector[0]="Reloj";    
    vector[1]="Evento";    
    vector[2]="RND1 Llegada";    
    vector[3]="RND2 Llegada";    
    vector[4]="Tiempo llegada 1";    
    vector[5]="Tiempo Llegada 2";    
    vector[6]="Próxima Llegada";    
    vector[7]="RND Tiempo Previsto";    
    vector[8]="Tiempo Previsto";    
    vector[9]="RND Condición";    
    vector[10]="Condición";    
    vector[11]="Tiempo estación";
    int cantidad = 12+(cantParquimetros);
    for (i = 12; i < cantidad; i++) 
        {
            vector[i]=j;
            j++;
        }
    int k;
    j=1;
    for (k=i; k <i+(cantParquimetros*2); k++) {
        vector[k]="Estado "+j;
        k++;
        vector[k]="Tiempo "+j;
        j++;
    }
    
    vector[k]="Contador Autos Sin Lugar";
    vector[k+1]="Contador Autos Infracción";
    vector[k+2]="Contador Total Autos Estacionados";
    dm.setColumnIdentifiers(vector);
    TableColumnModel cm = table.getColumnModel();
    ColumnGroup g_name = new ColumnGroup("Llegada Auto");
    g_name.add(cm.getColumn(2));
    g_name.add(cm.getColumn(3));
    g_name.add(cm.getColumn(4));
    g_name.add(cm.getColumn(5));
    g_name.add(cm.getColumn(6));
    ColumnGroup g_lang = new ColumnGroup("Fin estacionamiento");
    int l;    
    for (l = 12; l < cantidad; l++) {
            g_lang.add(cm.getColumn(l));
        }
        
    ColumnGroup g_other = new ColumnGroup("Parquimetros");
    int p;
        for (p = l; p < l+(cantParquimetros*2); p++) {
            g_other.add(cm.getColumn(p));
            p++;
            g_other.add(cm.getColumn(p));
        }
    
    GroupableTableHeader header = (GroupableTableHeader)table.getTableHeader();
    header.addColumnGroup(g_name);
    header.addColumnGroup(g_lang);
    header.addColumnGroup(g_other);
    JScrollPane scroll = new JScrollPane(table,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    getContentPane().add( scroll );
    setSize( 400, 120 );
    Gestor gestor=new Gestor(Double.parseDouble(txt_reloj.getText()),Integer.parseInt(txt_cantParquimetros.getText()),Double.parseDouble(txt_horaInicio.getText()));
    gestor.simular(this,Integer.parseInt(this.txt_cantIteraciones.getText()));
    
    }//GEN-LAST:event_btn_simularActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void escribirLlegadaAuto(double reloj,String evento,double rnd1,double rnd2,double tiempo1,double tiempo2,double proxLlegada,double rndTurno,int turno,double rndCondicion,String condicion,double tiempoEstacionado, Auto[]autos,Parquimetro[]parquimetros,int contAutosSinLugar,int contAutosConInfraccion,int contAutosSiEstacionaron, int numeroAuto,int posParquimetro,boolean banLlegada,ArrayList autoConInfraccionesEnEsteEvento)
    {
//        Object [] identificador= new Object[vector.length+cantidad];
//        identificador=vector;
//        for (int i = 0; i < vector.length; i++) {
//            identificador[i]=vector[i];
//        }
//        
//        identificador[identificador.length-2]="Auto "+numeroAuto;
//        identificador[identificador.length-1]="Nº Parquimetro";
//        dm.setColumnIdentifiers(identificador);
        int c = dm.getColumnCount();
        Object [] obj=new Object[c+2];
        obj[0]=reloj;
        obj[1]=evento;
        if(rnd1==0)
            obj[2]="-";
        else
            obj[2]=rnd1;
        if(rnd2==0)
            obj[3]="-";
        else
            obj[3]=rnd2;
        if(tiempo1==0)
            obj[4]="-";
        else
            obj[4]=tiempo1;
        if(tiempo2==0)
            obj[5]="-";
        else
            obj[5]=tiempo2;
        obj[6]=proxLlegada;
        obj[7]=rndTurno;
        obj[8]=turno;
        obj[9]=rndCondicion;
        obj[10]=condicion;
        obj[11]=tiempoEstacionado;
        int j=12;
        for (int i = 0; i < autos.length; i++) 
        {
            if(autos[i].getHoraSalida()!=0)
            {
                obj[j]=autos[i].getHoraSalida();
            }
            else
            {
                obj[j]="-";
            }
            j++;
        }
        for (int i = 0; i < parquimetros.length; i++) 
        {
            obj[j]=parquimetros[i].getEstado();
            j++;
            obj[j]="-";
            j++;
        }
        obj[j]=contAutosSinLugar;
        obj[j+1]=contAutosConInfraccion;
        obj[j+2]=contAutosSiEstacionaron;
        
        dm.addColumn("Auto "+numeroAuto);
        dm.addColumn("Nº Parquímetro");
        c = dm.getColumnCount();
        int indice=j+3;
        for (int i = indice; i < c-2; i++) {
            if(dm.getRowCount()!=0)
            {
                Object info=dm.getValueAt(dm.getRowCount()-1, i);
                obj[i]=info;
                i++;
                info=dm.getValueAt(dm.getRowCount()-1, i);
                obj[i]=info;
            }
        }
        if(banLlegada)
        {
            obj[c-2]=autos[posParquimetro].getEstadoLetras();
            obj[c-1]=posParquimetro+1;
        }
        else
        {
            obj[c-2]="Sin estacionar";
            obj[c-1]="-";
        }
        
        int ind=j+3;
        for (int i = 0; i < autoConInfraccionesEnEsteEvento.size(); i++) 
        {
            int n=(int)autoConInfraccionesEnEsteEvento.get(i);
            int numero=n+1;
            int casa=0;
            for (int k = ind; k < c; k++) 
            {
                Object info=dm.getValueAt(dm.getRowCount()-1,k);
                if(info.getClass().isInstance(casa))
                {
                    int informacion=(int)info;
                    if(informacion==numero)
                    {
                        obj[k-1]=autos[informacion].getEstado();
                        break;
                    }
                }
            }
        }
        dm.addRow(obj);
        table.setModel(dm);
    }
    
    public static void escribirFinEstacionamiento(double reloj, String evento,double rnd1, double rnd2,double tiempo1,double tiempo2,double proxLlegada,Auto[] autos, Parquimetro[] parquimetros,int contAutosSinLugar,int contAutosConInfraccion,int contAutosSiEstacionaron,int posMin,ArrayList autoConInfraccionesEnEsteEvento)
    {
        int c = dm.getColumnCount();
        Object [] obj=new Object[c];
        obj[0]=reloj;
        obj[1]=evento;
        if(rnd1==0)
            obj[2]="-";
        else
            obj[2]=rnd1;
        if(rnd2==0)
            obj[3]="-";
        else
            obj[3]=rnd2;
        if(tiempo1==0)
            obj[4]="-";
        else
            obj[4]=tiempo1;
        if(tiempo2==0)
            obj[5]="-";
        else
            obj[5]=tiempo2;
        obj[6]=proxLlegada;
        int j=6+6;
        for (int i = 0; i < autos.length; i++) {
            if(autos[i].getHoraSalida()==reloj)
            {
                obj[j]="-";
            }
            else
            {
                obj[j]=autos[i].getHoraSalida();
            }
            j++;
        }
        for (int i = 0; i < parquimetros.length; i++) 
        {
            obj[j]=parquimetros[i].getEstado();
            j++;
            if(parquimetros[i].getEstado()=="Libre con saldo")
            {
                obj[j]=parquimetros[i].getHoraFin();
            }
            else
            {
                obj[j]="-";
            }
            j++;
        }
        obj[j]=contAutosSinLugar;
        obj[j+1]=contAutosConInfraccion;
        obj[j+2]=contAutosSiEstacionaron;
        
        int indice=j+4;
        int fila=dm.getRowCount();
        
        for (int i = indice; i < c; i++) {
            Object informacion=dm.getValueAt(fila-1, i);
            int casa=0;
//            System.out.println("CLASE: "+informacion.getClass().isInstance(casa));

            if(informacion.getClass().isInstance(casa))
            {
//                System.out.println("ENTRE");
                int info = (int)informacion;
                if(info == posMin+1)
                {
//                    System.out.println("ENTRA");
                    obj[i-1]="-";
                    obj[i]="-";
                }
                else
                {
                    Object otraInfo=dm.getValueAt(fila-1, i-1);
                    obj[i-1]=otraInfo;
                    otraInfo=dm.getValueAt(fila-1, i);
                    obj[i]=otraInfo;
                }
            }
            else
            {
                    Object otraInfo=dm.getValueAt(fila-1, i-1);
                    obj[i-1]=otraInfo;
                    otraInfo=dm.getValueAt(fila-1, i);
                    obj[i]=otraInfo;

            }
            i++;
        }
        int ind=j+3;
        for (int i = 0; i < autoConInfraccionesEnEsteEvento.size(); i++) 
        {
            int n=(int)autoConInfraccionesEnEsteEvento.get(i);
            int numero=n+1;
            int casa=0;
            for (int k = ind; k < c; k++) 
            {
                Object info=dm.getValueAt(dm.getRowCount()-1,k);
                if(info.getClass().isInstance(casa))
                {
                    int informacion=(int)info;
                    if(informacion==numero)
                    {
                        obj[k-1]=autos[informacion].getEstado();
                        break;
                    }
                }
            }
        }
        dm.addRow(obj);
        table.setModel(dm);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_simular;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tablaCondicion;
    private javax.swing.JTable tablaTiempo;
    private javax.swing.JTextField txt_cantIteraciones;
    private javax.swing.JTextField txt_cantParquimetros;
    private javax.swing.JTextField txt_horaInicio;
    private javax.swing.JTextField txt_reloj;
    // End of variables declaration//GEN-END:variables

    void escribirInicioSimulacion(double reloj, String inicio, double rndTiempo1, double d, double tiempo1, double d0, double proxLlegada, int contAutosSinLugar, int contAutosConInfraccion, int contAutosSiEstacionaron) {
    int c = dm.getColumnCount();
        Object [] obj=new Object[c+2];
        obj[0]=reloj;
        obj[1]=inicio;
        if(rndTiempo1==0)
            obj[2]="-";
        else
            obj[2]=rndTiempo1;
        if(d==0)
            obj[3]="-";
        else
            obj[3]=d;
        if(tiempo1==0)
            obj[4]="-";
        else
            obj[4]=tiempo1;
        if(d0==0)
            obj[5]="-";
        else
            obj[5]=d0;
        obj[6]=proxLlegada;
        obj[7]="-";
        obj[8]="-";
        obj[9]="-";
        obj[10]="-";
        obj[11]="-";
      
      
        dm.addRow(obj);
        table.setModel(dm);
    
    }
}
